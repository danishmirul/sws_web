import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:sws_web/models/user.dart';
import 'package:sws_web/services/firebase_auth_service.dart';
import 'package:sws_web/services/firestore_service.dart';

/// Used to create user-dependant objects that need to be accessible by all widgets.
/// This widget should live above the [MaterialApp].
/// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder.
class AuthWidgetBuilder extends StatelessWidget {
  const AuthWidgetBuilder({Key key, @required this.builder}) : super(key: key);
  final Widget Function(BuildContext, AsyncSnapshot<User>) builder;

  @override
  Widget build(BuildContext context) {
    print('AuthWidgetBuilder rebuild');
    final authService =
        Provider.of<FirebaseAuthService>(context, listen: false);
    return StreamBuilder<User>(
      stream: authService.onAuthStateChanged,
      builder: (context, snapshot) {
        print('StreamBuilder connectionState: ${snapshot.connectionState}');
        final User user = snapshot.data;
        if (user != null) {
          return FutureBuilder(
            future: FirestoreService(uid: user.uid).getCurrentUser(),
            builder: (context, snapshot) {
              print('CurrentData: ${snapshot.data}');
              if (snapshot.hasData) {
                final User currentUser = user;
                return MultiProvider(
                  providers: [
                    Provider<User>.value(value: currentUser),
                    Provider<FirestoreService>(
                      create: (_) => FirestoreService(uid: currentUser.uid),
                    ),
                  ],
                  child: builder(context, snapshot),
                );
              }
              return builder(context, snapshot);
            },
          );
        }
        return builder(context, snapshot);
      },
    );
  }
}
